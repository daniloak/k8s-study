apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.microservice.name }}
  namespace: {{ .Values.microservice.namespace }}
spec:
  replicas: {{ .Values.microservice.replicas }}
  selector:
    matchLabels:
      app.kubernetes.io/instance: {{ .Values.microservice.name }} #link to the template labels
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 50% #we need to have 50% of running pod in old version
      maxSurge: 1 #ensure that we do not have more than 3 pod replicas
  template:
    metadata:
      labels:
        app.kubernetes.io/name: grade-submission
        app.kubernetes.io/component: backend
        app.kubernetes.io/instance: {{ .Values.microservice.name }}
    spec:
      containers:
        - name: {{ .Values.microservice.name }}
          image: {{ .Values.workload.image }}
          envFrom:
            - secretRef:
                name: {{ .Values.microservice.name }}-secret
          livenessProbe:
            httpGet:
              path: /healthz
              port: {{ .Values.workload.port }}
            initialDelaySeconds: {{ .Values.workload.livenessDelay }} # wait to check for live
            periodSeconds: 5 #keep doing it for 5 seconds
          readinessProbe:
            httpGet:
              path: /readyz
              port: {{ .Values.workload.port }}
          resources:
            requests:
              memory: {{ .Values.workload.memory }}
              cpu: {{ .Values.workload.cpu }}
            limits:
              memory: {{ .Values.workload.memory }}
          ports:
            - containerPort: {{ .Values.workload.port }}
